@subheading asn1_length_der
@anchor{asn1_length_der}
@deftypefun {void} {asn1_length_der} (unsigned long int @var{len}, unsigned char * @var{ans}, int * @var{ans_len})
@var{len}: value to convert.

@var{ans}: string returned.

@var{ans_len}: number of meaningful bytes of ANS (ans[0]..ans[ans_len-1]).

Creates the DER coding for the LEN parameter (only the length).
The @code{ans} buffer is pre-allocated and must have room for the output.
@end deftypefun

@subheading asn1_octet_der
@anchor{asn1_octet_der}
@deftypefun {void} {asn1_octet_der} (const unsigned char * @var{str}, int @var{str_len}, unsigned char * @var{der}, int * @var{der_len})
@var{str}: OCTET string.

@var{str_len}: STR length (str[0]..str[str_len-1]).

@var{der}: string returned.

@var{der_len}: number of meaningful bytes of DER (der[0]..der[ans_len-1]).

Creates the DER coding for an OCTET type (length included).
@end deftypefun

@subheading asn1_bit_der
@anchor{asn1_bit_der}
@deftypefun {void} {asn1_bit_der} (const unsigned char * @var{str}, int @var{bit_len}, unsigned char * @var{der}, int * @var{der_len})
@var{str}: BIT string.

@var{bit_len}: number of meaningful bits in STR.

@var{der}: string returned.

@var{der_len}: number of meaningful bytes of DER
(der[0]..der[ans_len-1]).

Creates the DER coding for a BIT STRING type (length and pad
included).
@end deftypefun

@subheading asn1_der_coding
@anchor{asn1_der_coding}
@deftypefun {asn1_retCode} {asn1_der_coding} (ASN1_TYPE @var{element}, const char * @var{name}, void * @var{ider}, int * @var{len}, char * @var{ErrorDescription})
@var{element}: pointer to an ASN1 element

@var{name}: the name of the structure you want to encode (it must be
inside *POINTER).

@var{ider}: vector that will contain the DER encoding. DER must be a
pointer to memory cells already allocated.

@var{len}: number of bytes of *@code{ider}: @code{ider}[0]..@code{ider}[len-1], Initialy
holds the sizeof of der vector.

Creates the DER encoding for the NAME structure (inside *POINTER
structure).

@strong{Returns:} @code{ASN1_SUCCESS} if DER encoding OK, @code{ASN1_ELEMENT_NOT_FOUND}
if @code{name} is not a valid element, @code{ASN1_VALUE_NOT_FOUND} if there
is an element without a value, @code{ASN1_MEM_ERROR} if the @code{ider}
vector isn't big enough and in this case @code{len} will contain the
length needed.
@end deftypefun

