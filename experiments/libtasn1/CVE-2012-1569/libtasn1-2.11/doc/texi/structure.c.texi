@subheading asn1_array2tree
@anchor{asn1_array2tree}
@deftypefun {asn1_retCode} {asn1_array2tree} (const ASN1_ARRAY_TYPE * @var{array}, ASN1_TYPE * @var{definitions}, char * @var{errorDescription})
@var{array}: specify the array that contains ASN.1 declarations

@var{definitions}: return the pointer to the structure created by
*ARRAY ASN.1 declarations

@var{errorDescription}: return the error description.

Creates the structures needed to manage the ASN.1 definitions.
@code{array} is a vector created by @code{asn1_parser2array()}.

@strong{Returns:} @code{ASN1_SUCCESS} if structure was created correctly,
@code{ASN1_ELEMENT_NOT_EMPTY} if *@code{definitions} not ASN1_TYPE_EMPTY,
@code{ASN1_IDENTIFIER_NOT_FOUND} if in the file there is an identifier
that is not defined (see @code{errorDescription} for more information),
@code{ASN1_ARRAY_ERROR} if the array pointed by @code{array} is wrong.
@end deftypefun

@subheading asn1_delete_structure
@anchor{asn1_delete_structure}
@deftypefun {asn1_retCode} {asn1_delete_structure} (ASN1_TYPE * @var{structure})
@var{structure}: pointer to the structure that you want to delete.

Deletes the structure *@code{structure}.  At the end, *@code{structure} is set
to ASN1_TYPE_EMPTY.

@strong{Returns:} @code{ASN1_SUCCESS} if successful, @code{ASN1_ELEMENT_NOT_FOUND} if
*@code{structure} was ASN1_TYPE_EMPTY.
@end deftypefun

@subheading asn1_delete_element
@anchor{asn1_delete_element}
@deftypefun {asn1_retCode} {asn1_delete_element} (ASN1_TYPE @var{structure}, const char * @var{element_name})
@var{structure}: pointer to the structure that contains the element you
want to delete.

@var{element_name}: element's name you want to delete.

Deletes the element named *@code{element_name} inside *@code{structure}.

@strong{Returns:} @code{ASN1_SUCCESS} if successful, @code{ASN1_ELEMENT_NOT_FOUND} if
the @code{element_name} was not found.
@end deftypefun

@subheading asn1_create_element
@anchor{asn1_create_element}
@deftypefun {asn1_retCode} {asn1_create_element} (ASN1_TYPE @var{definitions}, const char * @var{source_name}, ASN1_TYPE * @var{element})
@var{definitions}: pointer to the structure returned by "parser_asn1" function

@var{source_name}: the name of the type of the new structure (must be
inside p_structure).

@var{element}: pointer to the structure created.

Creates a structure of type @code{source_name}.  Example using
"pkix.asn":

rc = asn1_create_element(cert_def, "PKIX1.Certificate", certptr);

@strong{Returns:} @code{ASN1_SUCCESS} if creation OK, @code{ASN1_ELEMENT_NOT_FOUND} if
@code{source_name} is not known.
@end deftypefun

@subheading asn1_print_structure
@anchor{asn1_print_structure}
@deftypefun {void} {asn1_print_structure} (FILE * @var{out}, ASN1_TYPE @var{structure}, const char * @var{name}, int @var{mode})
@var{out}: pointer to the output file (e.g. stdout).

@var{structure}: pointer to the structure that you want to visit.

@var{name}: an element of the structure

@var{mode}: specify how much of the structure to print, can be
@code{ASN1_PRINT_NAME}, @code{ASN1_PRINT_NAME_TYPE},
@code{ASN1_PRINT_NAME_TYPE_VALUE}, or @code{ASN1_PRINT_ALL}.

Prints on the @code{out} file descriptor the structure's tree starting
from the @code{name} element inside the structure @code{structure}.
@end deftypefun

@subheading asn1_number_of_elements
@anchor{asn1_number_of_elements}
@deftypefun {asn1_retCode} {asn1_number_of_elements} (ASN1_TYPE @var{element}, const char * @var{name}, int * @var{num})
@var{element}: pointer to the root of an ASN1 structure.

@var{name}: the name of a sub-structure of ROOT.

@var{num}: pointer to an integer where the result will be stored

Counts the number of elements of a sub-structure called NAME with
names equal to "?1","?2", ...

@strong{Returns:} @code{ASN1_SUCCESS} if successful, @code{ASN1_ELEMENT_NOT_FOUND} if
@code{name} is not known, @code{ASN1_GENERIC_ERROR} if pointer @code{num} is @code{NULL}.
@end deftypefun

@subheading asn1_find_structure_from_oid
@anchor{asn1_find_structure_from_oid}
@deftypefun {const char *} {asn1_find_structure_from_oid} (ASN1_TYPE @var{definitions}, const char * @var{oidValue})
@var{definitions}: ASN1 definitions

@var{oidValue}: value of the OID to search (e.g. "1.2.3.4").

Search the structure that is defined just after an OID definition.

@strong{Returns:} @code{NULL} when @code{oidValue} not found, otherwise the pointer to a
constant string that contains the element name defined just after
the OID.
@end deftypefun

@subheading asn1_copy_node
@anchor{asn1_copy_node}
@deftypefun {asn1_retCode} {asn1_copy_node} (ASN1_TYPE @var{dst}, const char * @var{dst_name}, ASN1_TYPE @var{src}, const char * @var{src_name})
@var{dst}: Destination ASN1_TYPE node.

@var{dst_name}: Field name in destination node.

@var{src}: Source ASN1_TYPE node.

@var{src_name}: Field name in source node.

Create a deep copy of a ASN1_TYPE variable.

@strong{Returns:} Return @code{ASN1_SUCCESS} on success.
@end deftypefun

