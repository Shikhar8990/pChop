//===-- KModule.h -----------------------------------------------*- C++ -*-===//
//
//                     The KLEE Symbolic Virtual Machine
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef KLEE_KMODULE_H
#define KLEE_KMODULE_H

#include "klee/Config/Version.h"
#include "klee/Interpreter.h"

#include "klee/Internal/Analysis/ReachabilityAnalysis.h"
#include "klee/Internal/Analysis/Inliner.h"
#include "klee/Internal/Analysis/AAPass.h"
#include "klee/Internal/Analysis/ModRefAnalysis.h"
#include "klee/Internal/Analysis/Cloner.h"
#include "klee/Internal/Analysis/SliceGenerator.h"

#include <map>
#include <set>
#include <vector>
#include <fstream>

namespace llvm {
  class BasicBlock;
  class Constant;
  class Function;
  class Instruction;
  class Module;
#if LLVM_VERSION_CODE <= LLVM_VERSION(3, 1)
  class TargetData;
#else
  class DataLayout;
#endif
}

namespace klee {
  struct Cell;
  class Executor;
  class Expr;
  class InterpreterHandler;
  class InstructionInfoTable;
  struct KInstruction;
  class KModule;
  template<class T> class ref;

  struct KFunction {
    llvm::Function *function;

    unsigned numArgs, numRegisters;

    unsigned numInstructions;
    KInstruction **instructions;

    std::map<llvm::BasicBlock*, unsigned> basicBlockEntry;

    /// Whether instructions in this function should count as
    /// "coverable" for statistics and search heuristics.
    bool trackCoverage;
    
    bool isCloned;

  private:
    KFunction(const KFunction&);
    KFunction &operator=(const KFunction&);

  public:
    explicit KFunction(llvm::Function*, KModule *);
    ~KFunction();

    unsigned getArgRegister(unsigned index) { return index; }
  };


  class KConstant {
  public:
    /// Actual LLVM constant this represents.
    llvm::Constant* ct;

    /// The constant ID.
    unsigned id;

    /// First instruction where this constant was encountered, or NULL
    /// if not applicable/unavailable.
    KInstruction *ki;

    KConstant(llvm::Constant*, unsigned, KInstruction*);
  };


  class KModule {
  public:
    llvm::Module *module;
#if LLVM_VERSION_CODE <= LLVM_VERSION(3, 1)
    llvm::TargetData *targetData;
#else
    llvm::DataLayout *targetData;
#endif
    
    // Some useful functions to know the address of
    llvm::Function *kleeMergeFn;

    // Our shadow versions of LLVM structures.
    std::vector<KFunction*> functions;
    std::map<llvm::Function*, KFunction*> functionMap;
    //aadding a map from names to function
    std::map<std::string, llvm::Function*> funcNameMap;


    // Functions which escape (may be called indirectly)
    // XXX change to KFunction
    std::set<llvm::Function*> escapingFunctions;

    InstructionInfoTable *infos;
    InstructionInfoTable *infosOrig;

    std::vector<llvm::Constant*> constants;
    std::map<llvm::Constant*, KConstant*> constantMap;
    KConstant* getKConstant(llvm::Constant *c);

    std::vector<Cell> constantTable;

    // Functions which are part of KLEE runtime
    std::set<const llvm::Function*> internalFunctions;

    //set of lines which have load instructions that are blocked
    std::set<unsigned> blockingLoadLinesNumbers;

    //set of lines which have overrding stores
    std::set<unsigned> overrridingStoreLineNumbers;

    //instruction to assembly line number map before dataflow anal
    std::map<const llvm::Instruction*, unsigned> beforeLineMap;

    int mpiCoreId;

    typedef std::pair<unsigned, uint64_t> PSEAllocSite;
    typedef std::pair<std::string, PSEAllocSite> PSEModInfo;
    typedef std::map<PSEModInfo, uint32_t> PSEModInfoToIdMap;

    typedef std::pair<std::string, uint64_t> PSEAllocSiteG;
    typedef std::pair<std::string, PSEAllocSiteG> PSEModInfoG;
    typedef std::map<PSEModInfoG, uint32_t> PSEModInfoToIdMapG;

    typedef std::map<std::string, std::set<unsigned>> PSEModSetMap;
    typedef std::map<unsigned, std::pair<std::set<PSEModInfo>, std::set<PSEModInfoG>>> PSELoadToModInfoMap;
    typedef std::pair<const llvm::Value *, uint64_t> AllocSite;
    typedef std::pair<llvm::Function *, AllocSite> ModInfo;

  private:
    // Mark function with functionName as part of the KLEE runtime
    void addInternalFunction(const char* functionName);

  public:
    KModule(llvm::Module *_module);
    ~KModule();

    /// Initialize local data structures.
    //
    // FIXME: ihandler should not be here
    void prepare(const Interpreter::ModuleOptions &opts,
                 const std::vector<Interpreter::SkippedFunctionOption> &skippedFunctions,
                 InterpreterHandler *ihandler,
                 ReachabilityAnalysis *ra,
                 Inliner *inliner,
                 AAPass *aa,
                 ModRefAnalysis *mra,
                 Cloner *cloner,
                 SliceGenerator *sliceGenerator,
                 bool enable_analysis,
                 int coreId);

    void getModRefInfoMaps(ModRefAnalysis *mra, PSEModInfoToIdMap& pseModInfoToIdMap, PSEModInfoToIdMapG& pseModInfoToIdMapG);
    void getLoadToModInfoMap(ModRefAnalysis *mra, PSELoadToModInfoMap& pseLoadToModInfoMap);

    void getModSetMap(ModRefAnalysis *mra, PSEModSetMap& pseModSetMap);

    void getBlockingLoadLineNumbers(std::set<unsigned>& inBlockingLoadLinesNumbers) {
      inBlockingLoadLinesNumbers = blockingLoadLinesNumbers;
    }
    void getOverrridingStoreLineNumbers(std::set<unsigned>& inOverrridingStoreLineNumbers) {
      inOverrridingStoreLineNumbers = overrridingStoreLineNumbers;
    }

    void setBlockingLoads(std::set<unsigned>& inBlockingLoadLinesNumbers) {
      blockingLoadLinesNumbers = inBlockingLoadLinesNumbers;
    }

    void setOverrridingStores(std::set<unsigned>& inOverrridingStoreLineNumbers) {
      overrridingStoreLineNumbers = inOverrridingStoreLineNumbers;
    } 

    /// Return an id for the given constant, creating a new one if necessary.
    unsigned getConstantID(llvm::Constant *c, KInstruction* ki);

    void addFunction(KFunction *kf, bool isSkippingFunctions, Cloner *cloner, ModRefAnalysis *mra, 
        bool enable_analysis, std::map<const llvm::Instruction*, unsigned>& lmap); 

    //read the data flow analysis info from a file
    void parseBlockingLoadStoreLineNumbers();

  };
} // End klee namespace

#endif
