//===-- KModule.cpp -------------------------------------------------------===//
//
//                     The KLEE Symbolic Virtual Machine
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "KModule"
#include "klee/Internal/Module/KModule.h"
#include "klee/Internal/Support/ErrorHandling.h"

#include "Passes.h"

#include "klee/Config/Version.h"
#include "klee/Interpreter.h"
#include "klee/Internal/Module/Cell.h"
#include "klee/Internal/Module/KInstruction.h"
#include "klee/Internal/Module/InstructionInfoTable.h"
#include "klee/Internal/Support/Debug.h"
#include "klee/Internal/Support/ModuleUtil.h"

#include "llvm/Bitcode/ReaderWriter.h"
#if LLVM_VERSION_CODE >= LLVM_VERSION(3, 3)
#include "llvm/IR/Instructions.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/ValueSymbolTable.h"
#include "llvm/IR/DataLayout.h"
#else
#include "llvm/Instructions.h"
#include "llvm/LLVMContext.h"
#include "llvm/Module.h"
#include "llvm/ValueSymbolTable.h"
#if LLVM_VERSION_CODE <= LLVM_VERSION(3, 1)
#include "llvm/Target/TargetData.h"
#else
#include "llvm/DataLayout.h"
#endif

#endif

#if LLVM_VERSION_CODE < LLVM_VERSION(3, 5)
#include "llvm/Support/CallSite.h"
#else
#include "llvm/IR/CallSite.h"
#endif

#include "llvm/PassManager.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/raw_os_ostream.h"
#include "llvm/Support/Path.h"
#include <llvm/Support/InstIterator.h>
#include "llvm/Transforms/Scalar.h"

#include <llvm/Transforms/Utils/Cloning.h>

#include "klee/Internal/Analysis/ReachabilityAnalysis.h"
#include "klee/Internal/Analysis/Inliner.h"
#include "klee/Internal/Analysis/AAPass.h"
#include "klee/Internal/Analysis/ModRefAnalysis.h"
#include "klee/Internal/Analysis/Cloner.h"
#include "klee/Internal/Analysis/SliceGenerator.h"

#include <sstream>

using namespace llvm;
using namespace klee;

namespace {
  enum SwitchImplType {
    eSwitchTypeSimple,
    eSwitchTypeLLVM,
    eSwitchTypeInternal
  };

  cl::list<std::string>
  MergeAtExit("merge-at-exit");
    
  cl::opt<bool>
  NoTruncateSourceLines("no-truncate-source-lines",
                        cl::desc("Don't truncate long lines in the output source"));

  cl::opt<bool>
  OutputSource("output-source",
               cl::desc("Write the assembly for the final transformed source"),
               cl::init(false));

  cl::opt<bool>
  OutputModule("output-module",
               cl::desc("Write the bitcode for the final transformed module"),
               cl::init(false));

  cl::opt<SwitchImplType>
  SwitchType("switch-type", cl::desc("Select the implementation of switch"),
             cl::values(clEnumValN(eSwitchTypeSimple, "simple", 
                                   "lower to ordered branches"),
                        clEnumValN(eSwitchTypeLLVM, "llvm", 
                                   "lower using LLVM"),
                        clEnumValN(eSwitchTypeInternal, "internal", 
                                   "execute switch internally"),
                        clEnumValEnd),
             cl::init(eSwitchTypeInternal));
  
  cl::opt<bool>
  DebugPrintEscapingFunctions("debug-print-escaping-functions", 
                              cl::desc("Print functions whose address is taken."));

  cl::opt<bool>
  UseSVFPTA("use-svf-analysis",
            cl::desc("Use SVF pointer analysis for reachability analysis (default=on)"),
            cl::init(true));
}

KModule::KModule(Module *_module) 
  : module(_module),
#if LLVM_VERSION_CODE <= LLVM_VERSION(3, 1)
    targetData(new TargetData(module)),
#else
    targetData(new DataLayout(module)),
#endif
    kleeMergeFn(0),
    infos(0) {
}

KModule::~KModule() {
  delete infos;

  for (std::vector<KFunction*>::iterator it = functions.begin(), 
         ie = functions.end(); it != ie; ++it)
    delete *it;

  for (std::map<llvm::Constant*, KConstant*>::iterator it=constantMap.begin(),
      itE=constantMap.end(); it!=itE;++it)
    delete it->second;

  delete targetData;
  delete module;
}

/***/

namespace llvm {
extern void Optimize(Module *, const std::string &EntryPoint);
}

// what a hack
static Function *getStubFunctionForCtorList(Module *m,
                                            GlobalVariable *gv, 
                                            std::string name) {
  assert(!gv->isDeclaration() && !gv->hasInternalLinkage() &&
         "do not support old LLVM style constructor/destructor lists");
  
  std::vector<LLVM_TYPE_Q Type*> nullary;

  Function *fn = Function::Create(FunctionType::get(Type::getVoidTy(getGlobalContext()), 
						    nullary, false),
				  GlobalVariable::InternalLinkage, 
				  name,
                              m);
  BasicBlock *bb = BasicBlock::Create(getGlobalContext(), "entry", fn);
  
  // From lli:
  // Should be an array of '{ int, void ()* }' structs.  The first value is
  // the init priority, which we ignore.
  ConstantArray *arr = dyn_cast<ConstantArray>(gv->getInitializer());
  if (arr) {
    for (unsigned i=0; i<arr->getNumOperands(); i++) {
      ConstantStruct *cs = cast<ConstantStruct>(arr->getOperand(i));
      assert(cs->getNumOperands()==2 && "unexpected element in ctor initializer list");
      
      Constant *fp = cs->getOperand(1);      
      if (!fp->isNullValue()) {
        if (llvm::ConstantExpr *ce = dyn_cast<llvm::ConstantExpr>(fp))
          fp = ce->getOperand(0);

        if (Function *f = dyn_cast<Function>(fp)) {
	  CallInst::Create(f, "", bb);
        } else {
          assert(0 && "unable to get function pointer from ctor initializer list");
        }
      }
    }
  }
  
  ReturnInst::Create(getGlobalContext(), bb);

  return fn;
}

static void injectStaticConstructorsAndDestructors(Module *m) {
  GlobalVariable *ctors = m->getNamedGlobal("llvm.global_ctors");
  GlobalVariable *dtors = m->getNamedGlobal("llvm.global_dtors");
  
  if (ctors || dtors) {
    Function *mainFn = m->getFunction("main");
    if (!mainFn)
      klee_error("Could not find main() function.");

    if (ctors)
    CallInst::Create(getStubFunctionForCtorList(m, ctors, "klee.ctor_stub"),
		     "", mainFn->begin()->begin());
    if (dtors) {
      Function *dtorStub = getStubFunctionForCtorList(m, dtors, "klee.dtor_stub");
      for (Function::iterator it = mainFn->begin(), ie = mainFn->end();
           it != ie; ++it) {
        if (isa<ReturnInst>(it->getTerminator()))
	  CallInst::Create(dtorStub, "", it->getTerminator());
      }
    }
  }
}

#if LLVM_VERSION_CODE < LLVM_VERSION(3, 3)
static void forceImport(Module *m, const char *name, LLVM_TYPE_Q Type *retType,
                        ...) {
  // If module lacks an externally visible symbol for the name then we
  // need to create one. We have to look in the symbol table because
  // we want to check everything (global variables, functions, and
  // aliases).

  Value *v = m->getValueSymbolTable().lookup(name);
  GlobalValue *gv = dyn_cast_or_null<GlobalValue>(v);

  if (!gv || gv->hasInternalLinkage()) {
    va_list ap;

    va_start(ap, retType);
    std::vector<LLVM_TYPE_Q Type *> argTypes;
    while (LLVM_TYPE_Q Type *t = va_arg(ap, LLVM_TYPE_Q Type*))
      argTypes.push_back(t);
    va_end(ap);

    m->getOrInsertFunction(name, FunctionType::get(retType, argTypes, false));
  }
}
#endif


void KModule::addInternalFunction(const char* functionName){
  Function* internalFunction = module->getFunction(functionName);
  if (!internalFunction) {
    KLEE_DEBUG(klee_warning(
        "Failed to add internal function %s. Not found.", functionName));
    return ;
  }
  KLEE_DEBUG(klee_message("Added function %s.",functionName));
  internalFunctions.insert(internalFunction);
}

void KModule::prepare(const Interpreter::ModuleOptions &opts,
		              const std::vector<Interpreter::SkippedFunctionOption> &skippedFunctions,
                      InterpreterHandler *ih,
                      ReachabilityAnalysis *ra,
                      Inliner *inliner,
                      AAPass *aa,
                      ModRefAnalysis *mra,
                      Cloner *cloner,
                      SliceGenerator *sliceGenerator,
                      bool enable_analysis,
                      int coreId) {
  mpiCoreId = coreId;

  if (!MergeAtExit.empty()) {
    Function *mergeFn = module->getFunction("klee_merge");
    if (!mergeFn) {
      LLVM_TYPE_Q llvm::FunctionType *Ty = 
        FunctionType::get(Type::getVoidTy(getGlobalContext()), 
                          std::vector<LLVM_TYPE_Q Type*>(), false);
      mergeFn = Function::Create(Ty, GlobalVariable::ExternalLinkage,
				 "klee_merge",
				 module);
    }

    for (cl::list<std::string>::iterator it = MergeAtExit.begin(), 
           ie = MergeAtExit.end(); it != ie; ++it) {
      std::string &name = *it;
      Function *f = module->getFunction(name);
      if (!f) {
        klee_error("cannot insert merge-at-exit for: %s (cannot find)",
                   name.c_str());
      } else if (f->isDeclaration()) {
        klee_error("cannot insert merge-at-exit for: %s (external)",
                   name.c_str());
      }

      BasicBlock *exit = BasicBlock::Create(getGlobalContext(), "exit", f);
      PHINode *result = 0;
      if (f->getReturnType() != Type::getVoidTy(getGlobalContext()))
#if LLVM_VERSION_CODE >= LLVM_VERSION(3, 0)
        result = PHINode::Create(f->getReturnType(), 0, "retval", exit);
#else
		result = PHINode::Create(f->getReturnType(), "retval", exit);
#endif
      CallInst::Create(mergeFn, "", exit);
      ReturnInst::Create(getGlobalContext(), result, exit);

      llvm::errs() << "KLEE: adding klee_merge at exit of: " << name << "\n";
      for (llvm::Function::iterator bbit = f->begin(), bbie = f->end(); 
           bbit != bbie; ++bbit) {
        if (&*bbit != exit) {
          Instruction *i = bbit->getTerminator();
          if (i->getOpcode()==Instruction::Ret) {
            if (result) {
              result->addIncoming(i->getOperand(0), bbit);
            }
            i->eraseFromParent();
	          BranchInst::Create(exit, bbit);
          }
        }
      }
    }
  }

  // Inject checks prior to optimization... we also perform the
  // invariant transformations that we will end up doing later so that
  // optimize is seeing what is as close as possible to the final
  // module.
    PassManager pm;
    pm.add(new ReturnToVoidFunctionPass(skippedFunctions));
    pm.add(new RaiseAsmPass());
    if (opts.CheckDivZero) pm.add(new DivCheckPass());
    if (opts.CheckOvershift) pm.add(new OvershiftCheckPass());
    // FIXME: This false here is to work around a bug in
    // IntrinsicLowering which caches values which may eventually be
    // deleted (via RAUW). This can be removed once LLVM fixes this
    // issue.
    pm.add(new IntrinsicCleanerPass(*targetData, false));
    pm.run(*module);

    if (opts.Optimize)
      Optimize(module, opts.EntryPoint);
#if LLVM_VERSION_CODE < LLVM_VERSION(3, 3)
    // Force importing functions required by intrinsic lowering. Kind of
    // unfortunate clutter when we don't need them but we won't know
    // that until after all linking and intrinsic lowering is
    // done. After linking and passes we just try to manually trim these
    // by name. We only add them if such a function doesn't exist to
    // avoid creating stale uses.

    LLVM_TYPE_Q llvm::Type *i8Ty = Type::getInt8Ty(getGlobalContext());
    forceImport(module, "memcpy", PointerType::getUnqual(i8Ty),
                PointerType::getUnqual(i8Ty),
                PointerType::getUnqual(i8Ty),
                targetData->getIntPtrType(getGlobalContext()), (Type*) 0);
    forceImport(module, "memmove", PointerType::getUnqual(i8Ty),
                PointerType::getUnqual(i8Ty),
                PointerType::getUnqual(i8Ty),
                targetData->getIntPtrType(getGlobalContext()), (Type*) 0);
    forceImport(module, "memset", PointerType::getUnqual(i8Ty),
                PointerType::getUnqual(i8Ty),
                Type::getInt32Ty(getGlobalContext()),
                targetData->getIntPtrType(getGlobalContext()), (Type*) 0);
#endif
    // FIXME: Missing force import for various math functions.

    // FIXME: Find a way that we can test programs without requiring
    // this to be linked in, it makes low level debugging much more
    // annoying.

    SmallString<128> LibPath(opts.LibraryDir);
    llvm::sys::path::append(LibPath,
#if LLVM_VERSION_CODE >= LLVM_VERSION(3,3)
        "kleeRuntimeIntrinsic.bc"
#else
        "libkleeRuntimeIntrinsic.bca"
#endif
      );
    module = linkWithLibrary(module, LibPath.str());

    // Add internal functions which are not used to check if instructions
    // have been already visited
    if (opts.CheckDivZero)
      addInternalFunction("klee_div_zero_check");
    if (opts.CheckOvershift)
      addInternalFunction("klee_overshift_check");


    // Needs to happen after linking (since ctors/dtors can be modified)
    // and optimization (since global optimization can rewrite lists).
    injectStaticConstructorsAndDestructors(module);

    // Finally, run the passes that maintain invariants we expect during
    // interpretation. We run the intrinsic cleaner just in case we
    // linked in something with intrinsics but any external calls are
    // going to be unresolved. We really need to handle the intrinsics
    // directly I think?
    PassManager pm3;
    pm3.add(createCFGSimplificationPass());
    switch(SwitchType) {
    case eSwitchTypeInternal: break;
    case eSwitchTypeSimple: pm3.add(new LowerSwitchPass()); break;
    case eSwitchTypeLLVM:  pm3.add(createLowerSwitchPass()); break;
    default: klee_error("invalid --switch-type");
    }
    pm3.add(new IntrinsicCleanerPass(*targetData));
    pm3.add(new PhiCleanerPass());
    pm3.run(*module);
#if LLVM_VERSION_CODE < LLVM_VERSION(3, 3)
    // For cleanliness see if we can discard any of the functions we
    // forced to import.
    Function *f;
    f = module->getFunction("memcpy");
    if (f && f->use_empty()) f->eraseFromParent();
    f = module->getFunction("memmove");
    if (f && f->use_empty()) f->eraseFromParent();
    f = module->getFunction("memset");
    if (f && f->use_empty()) f->eraseFromParent();
#endif
    //}
    // Write out the .ll assembly file. We truncate long lines to work
    // around a kcachegrind parsing bug (it puts them on new lines), so
    // that source browsing works.
    if (OutputSource) {
      llvm::raw_fd_ostream *os = ih->openOutputFile("assembly.ll");
      assert(os && !os->has_error() && "unable to open source output");

      // We have an option for this in case the user wants a .ll they
      // can compile.
      if (NoTruncateSourceLines) {
        *os << *module;
      } else {
        std::string string;
        llvm::raw_string_ostream rss(string);
        rss << *module;
        rss.flush();
        const char *position = string.c_str();

        for (;;) {
          const char *end = index(position, '\n');
          if (!end) {
            *os << position;
            break;
          } else {
            unsigned count = (end - position) + 1;
            if (count<255) {
              os->write(position, count);
            } else {
              os->write(position, 254);
              *os << "\n";
            }
            position = end+1;
          }
        }
      }
      delete os;
    }

    if (OutputModule) {
      llvm::raw_fd_ostream *f = ih->openOutputFile("final.bc");
      WriteBitcodeToFile(module, *f);
      delete f;
    }

    kleeMergeFn = module->getFunction("klee_merge");
  
  //std::map<const llvm::Instruction*, unsigned> afterLineMap;
  
  if (!skippedFunctions.empty()) {
    if(enable_analysis) {
		  std::string fileName = "insts_before_df_";
		  fileName = fileName+std::to_string(mpiCoreId);
  	  infosOrig = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      infosOrig->buildInstructionToLineMap(module, beforeLineMap);
      
      /* prepare reachability analysis */
      ra->prepare();

      //fileName = "insts_after_ra_";
		  //fileName = fileName+std::to_string(mpiCoreId);
  	  //auto infos3 = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      //delete infos3;

      /* first, we need to do the inlining... */
      inliner->run();
      
      //fileName = "insts_after_inlining_";
		  //fileName = fileName+std::to_string(mpiCoreId);
  	  //auto infos4 = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      //delete infos4;

      /* run pointer analysis */
      klee_message("Running pointer analysis...");
      PassManager passManager;
      passManager.add(aa);
      passManager.run(*module);
      
      //fileName = "insts_after_pa_";
		  //fileName = fileName+std::to_string(mpiCoreId);
  	  //auto infos5 = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      //delete infos5;

      /* run reachability analysis */
      klee_message("Running reachability analysis...");
      ra->usePA(aa);
      ra->run(UseSVFPTA);
      
      //fileName = "insts_after_ra_run_";
		  //fileName = fileName+std::to_string(mpiCoreId);
  	  //auto infos6 = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      //delete infos6;

      /* run mod-ref analysis */
      klee_message("Running mod-ref analysis...");
      mra->run();
      
      //fileName = "insts_after_modref_";
		  //fileName = fileName+std::to_string(mpiCoreId);
  	  //auto infos7 = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      //delete infos7;

      if (sliceGenerator) {
        /* TODO: rename... */
        sliceGenerator->generate(true);
      }
    } else {
      
		  std::string fileName = "insts_before_no_df_";
		  fileName = fileName+std::to_string(mpiCoreId);
  	  infosOrig = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
      infosOrig->buildInstructionToLineMap(module, beforeLineMap);

  		bool changed = true;
  		std::set<std::string> keep;

  		keep.insert(opts.EntryPoint);

  		while (changed) {
    		std::set<Function *> functions;

    		for (Module::iterator i = module->begin(); i != module->end(); i++) {
      	Function *f = &*i;
      	if (keep.find(f->getName().str()) != keep.end()) {
        	continue;
      	}

      	if (f->hasNUses(0)) {
        		functions.insert(f);
      		}
    		}

    		for (Function *f : functions) {
      		std::cout << "erasing: " << f->getName().str() << "\n";
      		f->eraseFromParent();
    		}

    		changed = !functions.empty();
  		}
      //inliner->run();
    } 
  }

  /* Build shadow structures */
 
	if(enable_analysis) {
		std::string fileName = "insts_after_df_";
		fileName = fileName+std::to_string(mpiCoreId);
  	infos = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
    //infos->buildInstructionToLineMap(module, afterLineMap);
	} else {
		std::string fileName = "insts_after_no_df_";
		fileName = fileName+std::to_string(mpiCoreId);
  	infos = new InstructionInfoTable(mpiCoreId, module, !skippedFunctions.empty(), cloner, enable_analysis, fileName);
    //infos->buildInstructionToLineMap(module, afterLineMap);
	}
 
  for (Module::iterator it = module->begin(), ie = module->end();
       it != ie; ++it) {
    Function *f = it;
    if (f->isDeclaration()) {
      continue;
    }

    std::set<KFunction *> pool;
    pool.insert(new KFunction(f, this));

    if(enable_analysis) {
      if (!skippedFunctions.empty()) {
        Cloner::SliceMap *sliceMap = cloner->getSlices(f);
        if (sliceMap != 0) {
          for (Cloner::SliceMap::iterator s = sliceMap->begin(); s != sliceMap->end(); s++ ) {
            Cloner::SliceInfo &sliceInfo = s->second;
            if (!sliceInfo.isSliced) {
                /* don't add a cloned function which was not sliced */
                continue;
            }
						std::cout << "CLONING\n";
            KFunction *kcloned = new KFunction(sliceInfo.f, this);
            kcloned->isCloned = true;
            pool.insert(kcloned);
          }
        }
      }
    }

    for (std::set<KFunction *>::iterator kfi = pool.begin(); kfi != pool.end(); kfi++) {
      addFunction(*kfi, !skippedFunctions.empty(), cloner, mra, enable_analysis, beforeLineMap);
    }
  }
  
  /* Compute various interesting properties */

  for (std::vector<KFunction*>::iterator it = functions.begin(), 
         ie = functions.end(); it != ie; ++it) {
    KFunction *kf = *it;
    if (functionEscapes(kf->function))
      escapingFunctions.insert(kf->function);
  }

  if (DebugPrintEscapingFunctions && !escapingFunctions.empty()) {
    llvm::errs() << "KLEE: escaping functions: [";
    for (std::set<Function*>::iterator it = escapingFunctions.begin(), 
         ie = escapingFunctions.end(); it != ie; ++it) {
      llvm::errs() << (*it)->getName() << ", ";
    }
    llvm::errs() << "]\n";
  }
}

void KModule::getModSetMap(ModRefAnalysis *mra, PSEModSetMap& pseModSetMap) {
  assert(mra);
  auto modSetMap = mra->getModSetMap();
  for(auto it=modSetMap.begin(); it!=modSetMap.end(); ++it) {
    llvm::Function* func = it->first;
    auto instructionSet = it->second;
    std::set<unsigned> lines;
    for (auto it2=instructionSet.begin(); it2!=instructionSet.end(); ++it2) {
      //const InstructionInfo &info = infos->getInfo(*it2);
      assert(beforeLineMap.find(*it2) != beforeLineMap.end());
      //lines.insert(info.assemblyLine);
      lines.insert(beforeLineMap[*it2]);
    }
    pseModSetMap.insert(std::make_pair(func->getName().str(), lines));
  }
}

void KModule::getModRefInfoMaps(ModRefAnalysis *mra, PSEModInfoToIdMap& pseModInfoToIdMap, 
    PSEModInfoToIdMapG& pseModInfoToIdMapG) {

	assert(mra);	
  auto modInfoToIdMap = mra->getModInfoToIdMap();
  for(auto it=modInfoToIdMap.begin(); it!=modInfoToIdMap.end(); ++it) {
    ModInfo modInfo = it->first;
    uint32_t sliceId = it->second;
    Function* func = modInfo.first;
    AllocSite allocSite = modInfo.second;

    if (const Instruction *AI = dyn_cast<Instruction>(allocSite.first)) {
      //std::string str;
      //llvm::raw_string_ostream rso(str);
      //AI->print(rso);
      //const InstructionInfo &info = infos->getInfo(AI);
      assert(beforeLineMap.find(AI) != beforeLineMap.end());
      //PSEAllocSite pseAllocSite = std::make_pair(info.assemblyLine, allocSite.second);
      PSEAllocSite pseAllocSite = std::make_pair(beforeLineMap[AI], allocSite.second);
      PSEModInfo pseModInfo = std::make_pair(func->getName().str(), pseAllocSite);
      pseModInfoToIdMap.insert(std::make_pair(pseModInfo, sliceId));
    } else if(const GlobalVariable *AI = dyn_cast<GlobalVariable>(allocSite.first)) {
      //std::string str;
      //llvm::raw_string_ostream rso(str);
      //AI->print(rso);
      //const InstructionInfo &info = infos->getInfo(AI);
      //std::cout<<"Globals:"<<AI->getName().str()<<":"<<func->getName().str()<<"\n";
      PSEAllocSiteG pseAllocSiteG = std::make_pair(AI->getName().str(), allocSite.second);
      PSEModInfoG pseModInfoG = std::make_pair(func->getName().str(), pseAllocSiteG);
      pseModInfoToIdMapG.insert(std::make_pair(pseModInfoG, sliceId));
    } else {
      std::cout << "Err LINE: "<<allocSite.first->getName().str()<<std::endl;
      klee_error("Allocsite not an instruction or global variable");
    }
  }
}

void KModule::getLoadToModInfoMap(ModRefAnalysis *mra, PSELoadToModInfoMap& pseLoadToModInfoMap) {
  assert(mra);
  auto loadToModInfoMap = mra->getLoadToModInfoMap();
  for(auto it=loadToModInfoMap.begin(); it!=loadToModInfoMap.end(); ++it) {
    if (const Instruction *AI = dyn_cast<Instruction>((it->first))) {
      //const InstructionInfo &info = infos->getInfo(AI);
      assert(beforeLineMap.find(AI) != beforeLineMap.end());
      auto modInfoSet = it->second;
      std::set<PSEModInfo> pseModInfoSet;
      std::set<PSEModInfoG> pseModInfoSetG;
      for(auto it2=modInfoSet.begin(); it2!=modInfoSet.end(); it2++) {
        std::string funcName = (it2->first)->getName().str();
        AllocSite allocSite = it2->second;
        if(const Instruction *AI2 = dyn_cast<Instruction>(allocSite.first)) {
          //const InstructionInfo &info2 = infos->getInfo(AI2);
          assert(beforeLineMap.find(AI2) != beforeLineMap.end());
          //PSEAllocSite pseAllocSite = std::make_pair(info2.assemblyLine, allocSite.second);
          PSEAllocSite pseAllocSite = std::make_pair(beforeLineMap[AI2], allocSite.second);
          pseModInfoSet.insert(std::make_pair(funcName, pseAllocSite));
        } else if(const GlobalVariable *AI2 = dyn_cast<GlobalVariable>(allocSite.first)) {
          PSEAllocSiteG pseAllocSiteG = std::make_pair(AI2->getName().str(), allocSite.second);
          pseModInfoSetG.insert(std::make_pair(funcName, pseAllocSiteG));
        } else {
          std::cout << "Err LINE: "<<allocSite.first->getName().str()<<std::endl;
          klee_error("Allocsite not an instruction or global variable");
        }
      }
      //pseLoadToModInfoMap.insert(std::make_pair(info.assemblyLine, std::make_pair(pseModInfoSet, pseModInfoSetG))); 
      pseLoadToModInfoMap.insert(std::make_pair(beforeLineMap[AI], std::make_pair(pseModInfoSet, pseModInfoSetG))); 
    } else {
      klee_error("Allocsite not an instruction or global variable");
    } 
  }
}

void KModule::addFunction(KFunction *kf, bool isSkippingFunctions, Cloner *cloner, ModRefAnalysis *mra, 
    bool enable_analysis, std::map<const llvm::Instruction*, unsigned>& beforeLineMap) {
    for (unsigned i=0; i<kf->numInstructions; ++i) {
      KInstruction *ki = kf->instructions[i];
      ki->info = &infos->getInfo(ki->inst);
      ki->isCloned = kf->isCloned;
      ki->origInst = NULL;
      ki->mayBlock = false;
      ki->mayOverride = false;
      ki->id = i;

      if (!isSkippingFunctions) {
          continue;
      }

      if (kf->isCloned) {
          Value *origValue = cloner->translateValue(ki->inst);
          if (origValue) {
              /* TODO: some instructions can't be translated (RET, ...) */
              ki->origInst = dyn_cast<llvm::Instruction>(origValue);
          }
      }

      if(ki->inst->getOpcode() == Instruction::Load) {
        if(enable_analysis) {
          ki->mayBlock = mra->mayBlock(ki->getOrigInst());
          if(ki->mayBlock) {
            std::string str1;
            llvm::raw_string_ostream rso1(str1);
            (ki->getOrigInst())->print(rso1);
            assert(beforeLineMap.find(ki->inst) != beforeLineMap.end());
            //std::cout << "Core: "<<mpiCoreId<<"Registered blocking load: "<<str1<<" "<<"Line: "<<(ki->info)->assemblyLine<<"\n";
            //std::cout << "Core: "<<mpiCoreId<<"Registered blocking load: "<<str1<<" "<<"Line: "<<beforeLineMap[ki->inst]<<"\n";
            //blockingLoadLinesNumbers.insert((ki->info)->assemblyLine);
            blockingLoadLinesNumbers.insert(beforeLineMap[ki->inst]);
            //std::cout.flush();
          }
        } else {
          if(beforeLineMap.find(ki->inst) != beforeLineMap.end()) {
            if(blockingLoadLinesNumbers.find((beforeLineMap[ki->inst])-4) != blockingLoadLinesNumbers.end()) {
              std::string str1;
              llvm::raw_string_ostream rso1(str1);
              (ki->getOrigInst())->print(rso1);
              //std::cout << "FunctionBlock: "<<(ki->info)->assemblyLine<<" "<<kf->function->getName().str()
                //<<" "<<blockingLoadLinesNumbers.size()<<" "<<str1<<"\n";
                //std::cout.flush();
              //assert(mra->mayBlock(ki->getOrigInst()));
              //if(!(mra->mayBlock(ki->getOrigInst()))) {
                //std::set<llvm::Instruction *> instructionSet;
                //mra->getDependentLoads(instructionSet);
                //for(auto itt = instructionSet.begin(); itt!=instructionSet.end(); ++itt) {
                  //const InstructionInfo &info2 = infos->getInfo(*itt);
                  //std::string str;
                  //llvm::raw_string_ostream rso(str);
                  //(*itt)->print(rso);
                  //std::cout << "MRALINE: "<<info2.assemblyLine<<" "<<(*itt)->getParent()->getParent()->getName().str()
                    //<<" "<<str<<"\n";
                //}
                //klee_error("fucking shit");
              //}
              ki->mayBlock = true;
              //std::cout << "NOMRA Registered blocking load: "<<str1<<" "<<"Line: "<<beforeLineMap[ki->inst]<<"\n";
              //klee_error("Found a blocking load");
            }
          } 
          //else {
            //assert(!mra->mayBlock(ki->getOrigInst()));
            //ki->mayBlock = false;
          //}
        }
      }
      if (ki->inst->getOpcode() == Instruction::Store) {
        if(enable_analysis) {
        //if(true) {
          ki->mayOverride = mra->mayOverride(ki->getOrigInst());
          if(ki->mayOverride) {
            overrridingStoreLineNumbers.insert((ki->info)->assemblyLine);
            //std::cout <<"LALASTORE"<<mpiCoreId<<": "<<(ki->info)->assemblyLine<<kf->function->getName().str()<<"\n";
            //std::cout.flush();
          }
        } else {
          if(overrridingStoreLineNumbers.find((ki->info)->assemblyLine) != overrridingStoreLineNumbers.end()) {
            //std::cout << "FunctionLLA: "<<(ki->info)->assemblyLine<<" "<<kf->function->getName().str()<<"\n";
            //std::cout.flush();
            //assert(mra->mayOverride(ki->getOrigInst()));
            ki->mayOverride = true;
          } 
          //else {
            //assert(!mra->mayOverride(ki->getOrigInst()));
            //ki->mayOverride = false;
          //}
        }
      } 
    }
    functions.push_back(kf);
    functionMap.insert(std::make_pair(kf->function, kf));
    funcNameMap.insert(std::make_pair(kf->function->getName().str(), kf->function));
}

KConstant* KModule::getKConstant(Constant *c) {
  std::map<llvm::Constant*, KConstant*>::iterator it = constantMap.find(c);
  if (it != constantMap.end())
    return it->second;
  return NULL;
}

unsigned KModule::getConstantID(Constant *c, KInstruction* ki) {
  KConstant *kc = getKConstant(c);
  if (kc)
    return kc->id;  

  unsigned id = constants.size();
  kc = new KConstant(c, id, ki);
  constantMap.insert(std::make_pair(c, kc));
  constants.push_back(c);

  return id;
}

/***/

KConstant::KConstant(llvm::Constant* _ct, unsigned _id, KInstruction* _ki) {
  ct = _ct;
  id = _id;
  ki = _ki;
}

/***/

static int getOperandNum(Value *v,
                         std::map<Instruction*, unsigned> &registerMap,
                         KModule *km,
                         KInstruction *ki) {
  if (Instruction *inst = dyn_cast<Instruction>(v)) {
    return registerMap[inst];
  } else if (Argument *a = dyn_cast<Argument>(v)) {
    return a->getArgNo();
  } else if (isa<BasicBlock>(v) || isa<InlineAsm>(v) ||
             isa<MDNode>(v)) {
    return -1;
  } else {
    assert(isa<Constant>(v));
    Constant *c = cast<Constant>(v);
    return -(km->getConstantID(c, ki) + 2);
  }
}

KFunction::KFunction(llvm::Function *_function,
                     KModule *km) 
  : function(_function),
    numArgs(function->arg_size()),
    numInstructions(0),
    trackCoverage(true),
    isCloned(false) {
  for (llvm::Function::iterator bbit = function->begin(), 
         bbie = function->end(); bbit != bbie; ++bbit) {
    BasicBlock *bb = bbit;
    basicBlockEntry[bb] = numInstructions;
    numInstructions += bb->size();
  }

  instructions = new KInstruction*[numInstructions];

  std::map<Instruction*, unsigned> registerMap;

  // The first arg_size() registers are reserved for formals.
  unsigned rnum = numArgs;
  for (llvm::Function::iterator bbit = function->begin(), 
         bbie = function->end(); bbit != bbie; ++bbit) {
    for (llvm::BasicBlock::iterator it = bbit->begin(), ie = bbit->end();
         it != ie; ++it)
      registerMap[it] = rnum++;
  }
  numRegisters = rnum;
  
  unsigned i = 0;
  for (llvm::Function::iterator bbit = function->begin(), 
         bbie = function->end(); bbit != bbie; ++bbit) {
    for (llvm::BasicBlock::iterator it = bbit->begin(), ie = bbit->end();
         it != ie; ++it) {
      KInstruction *ki;

      switch(it->getOpcode()) {
      case Instruction::GetElementPtr:
      case Instruction::InsertValue:
      case Instruction::ExtractValue:
        ki = new KGEPInstruction(); break;
      default:
        ki = new KInstruction(); break;
      }

      ki->inst = it;      
      ki->dest = registerMap[it];

      if (isa<CallInst>(it) || isa<InvokeInst>(it)) {
        CallSite cs(it);
        unsigned numArgs = cs.arg_size();
        ki->operands = new int[numArgs+1];
        ki->operands[0] = getOperandNum(cs.getCalledValue(), registerMap, km,
                                        ki);
        for (unsigned j=0; j<numArgs; j++) {
          Value *v = cs.getArgument(j);
          ki->operands[j+1] = getOperandNum(v, registerMap, km, ki);
        }
      } else {
        unsigned numOperands = it->getNumOperands();
        ki->operands = new int[numOperands];
        for (unsigned j=0; j<numOperands; j++) {
          Value *v = it->getOperand(j);
          ki->operands[j] = getOperandNum(v, registerMap, km, ki);
        }
      }

      instructions[i++] = ki;
    }
  }
}

KFunction::~KFunction() {
  for (unsigned i=0; i<numInstructions; ++i)
    delete instructions[i];
  delete[] instructions;
}

void KModule::parseBlockingLoadStoreLineNumbers() {
  std::string line;
  std::ifstream myfile ("blocking.txt");
  if(myfile.is_open()) {
    while (getline(myfile,line)) {
      blockingLoadLinesNumbers.insert(std::stoi(line));
    }
    myfile.close();
  } else {
    klee_error("Blocking File not Found");
  }

  std::ifstream myfile1 ("overrridingStores.txt");
  if(myfile1.is_open()) {
    while (getline(myfile1,line)) {
    overrridingStoreLineNumbers.insert(std::stoi(line));
    }
    myfile1.close();
  } else {
    klee_error("Overriding Stor File not Found");
  }
}
